.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TFBS::DB::JASPAR2 3"
.TH TFBS::DB::JASPAR2 3 "2005-01-04" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
TFBS::DB::JASPAR2 \- interface to MySQL relational database of pattern matrices
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.IP "\(bu" 4
creating a database object by connecting to the existing JASPAR2\-type database
.Sp
.Vb 3
\&    my $db = TFBS::DB::JASPAR2\->connect("dbi:mysql:JASPAR2:myhost",
\&                                        "myusername",
\&                                        "mypassword");
.Ve
.IP "\(bu" 4
retrieving a TFBS::Matrix::* object from the database
.Sp
.Vb 2
\&    # retrieving a PFM by ID
\&    my $pfm = $db\->get_Matrix_by_ID(\*(AqM0079\*(Aq,\*(AqPFM\*(Aq);
\& 
\&    #retrieving a PWM by name
\&    my $pwm = $db\->get_Matrix_by_name(\*(AqNF\-kappaB\*(Aq, \*(AqPWM\*(Aq);
.Ve
.IP "\(bu" 4
retrieving a set of matrices as a TFBS::MatrixSet object according to various criteria
.Sp
.Vb 4
\&    # retrieving a set of PWMs from a list of IDs:
\&    my @IDlist = (\*(AqM0019\*(Aq, \*(AqM0045\*(Aq, \*(AqM0073\*(Aq, \*(AqM0101\*(Aq);
\&    my $matrixset = $db\->get_MatrixSet(\-IDs => \e@IDlist,
\&                                       \-matrixtype => "PWM");
\& 
\&    # retrieving a set of ICMs from a list of names:
\&    my @namelist = (\*(Aqp50\*(Aq, \*(Aqp53\*(Aq, \*(AqHNF\-1\*(Aq. \*(AqGATA\-1\*(Aq, \*(AqGATA\-2\*(Aq, \*(AqGATA\-3\*(Aq);
\&    my $matrixset = $db\->get_MatrixSet(\-names => \e@namelist,
\&                                       \-matrixtype => "ICM");
\& 
\&    # retrieving a set of all PFMs in the database
\&    # derived from human genes:
\&    my $matrixset = $db\->get_MatrixSet(\-species => [\*(AqHomo sapiens\*(Aq],
\&                                       \-matrixtype => "PFM");
.Ve
.IP "\(bu" 4
creating a new JASPAR2\-type database named \s-1MYJASPAR2:\s0
.Sp
.Vb 3
\&    my $db = TFBS::DB::JASPAR2\->create("dbi:mysql:MYJASPAR2:myhost",
\&                                       "myusername",
\&                                       "mypassword");
.Ve
.IP "\(bu" 4
storing a matrix in the database (currently only PFMs):
.Sp
.Vb 2
\&    #let $pfm is a TFBS::Matrix::PFM object
\&    $db\->store_Matrix($pfm);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1TFBS::DB::JASPAR2\s0 is a read/write database interface module that
retrieves and stores TFBS::Matrix::* and TFBS::MatrixSet
objects in a relational database.
.SH "JASPAR2 DATA MODEL"
.IX Header "JASPAR2 DATA MODEL"
\&\s-1JASPAR2\s0 is working name for a relational database model used
for storing transcriptional factor pattern matrices in a MySQL database.
It was initially designed to store matrices for the \s-1JASPAR\s0 database of
high quality eukaryotic transcription factor specificity profiles by
Albin Sandelin and Wyeth W. Wasserman. Besides the profile matrix itself,
this data model stores profile \s-1ID\s0 (unique), name, structural class,
basic taxonomic and bibliographic information
as well as some additional optional tags.
.PP
Due to its data model, which precedeed the design of the 
module, \s-1TFBS::DB::JASPAR2\s0 cannot store arbitrary tags for a matrix.
.PP
The supported tags are
    'acc'      # (accession number; 
	       # originally for transcription factor protein seq)
    'seqdb'    # sequence database where 'acc' comes from
    'medline'  # PubMed \s-1ID\s0
    'species'  # Species name
    'sysgroup'
    'total_ic' # total information content \- redundant, present 
               # for historical
\&\*(L"medline\*(R" => ($self\->_get_medline($ID) or  "\*(L"),
		          \*(R"species\*(L" => ($self\->_get_species($ID) or \*(R"\*(L"),
		          \*(R"sysgroup\*(L"=> ($self\->_get_sysgroup($ID) or \*(R"\*(L"),
		          \*(R"type\*(L"    => ($self\->_get_type($ID) or \*(R"\*(L"),
		          \*(R"seqdb\*(L"   => ($self\->_get_seqdb($ID) or \*(R"\*(L"),
		          \*(R"acc\*(L"     => ($self\->_get_acc($ID) or \*(R"\*(L"),
		          \*(R"total_ic"=
.PP
\&\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-  \s-1ADVANCED\s0  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.PP
For the developers and the curious, here is the \s-1JASPAR2\s0 data model:
.PP
.Vb 12
\&       CREATE TABLE matrix_data (
\&         ID varchar(16) DEFAULT \*(Aq\*(Aq NOT NULL,
\&         pos_ID varchar(24) DEFAULT \*(Aq\*(Aq NOT NULL,
\&         base enum(\*(AqA\*(Aq,\*(AqC\*(Aq,\*(AqG\*(Aq,\*(AqT\*(Aq),
\&         position tinyint(3) unsigned,
\&         raw int(3) unsigned,
\&         info float(7,5) unsigned, \-\- calculated
\&         pwm float(7,5) unsigned,  \-\- calculated
\&         normalized float(7,5) unsigned,
\&         PRIMARY KEY (pos_ID),
\&         KEY id_index (ID)
\&       );
\&
\&
\&       CREATE TABLE matrix_info (
\&         ID varchar(16) DEFAULT \*(Aq\*(Aq NOT NULL,
\&         name varchar(15) DEFAULT \*(Aq\*(Aq NOT NULL,
\&         type varchar(8) DEFAULT \*(Aq\*(Aq NOT NULL,
\&         class varchar(20),
\&         phylum varchar (32),          \-\- maps to \*(Aqsysgroup\*(Aq tag
\&         litt varchar(40),             \-\- not used by this module
\&         medline int(12),
\&         information varchar(20),      \-\- not used by this module
\&         iterations varchar(6),
\&         width int(2),                 \-\- calculated
\&         consensus varchar(25),        \-\- calculated
\&         IC float(6,4),                \-\- maps to \*(Aqtotal_ic\*(Aq tag
\&         sites int(3) unsigned,        \-\- not used by this module
\&         PRIMARY KEY (ID)
\&       )
\&
\&
\&       CREATE TABLE matrix_seqs (
\&         ID varchar(16) DEFAULT \*(Aq\*(Aq NOT NULL,
\&         internal varchar(8) DEFAULT \*(Aq\*(Aq NOT NULL,
\&         seq_db varchar(15) NOT NULL,
\&         seq varchar(10) NOT NULL,
\&         PRIMARY KEY (ID, seq_db, seq)
\&       )
\&
\&
\&       CREATE TABLE matrix_species (
\&         ID varchar(16) DEFAULT \*(Aq\*(Aq NOT NULL,
\&         internal varchar(8) DEFAULT \*(Aq\*(Aq NOT NULL,
\&         species varchar(24) NOT NULL,
\&         PRIMARY KEY (ID, species)
\&       )
.Ve
.PP
It is our best intention to hide the details of this data model, which we 
are using on a daily basis in our work, from most \s-1TFBS\s0 users, simply 
because for historical reasons some table column names are confusing 
at best. Most users should only know the methods to store the data and 
which tags are supported.
.PP
\&\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.SH "FEEDBACK"
.IX Header "FEEDBACK"
Please send bug reports and other comments to the author.
.SH "AUTHOR \- Boris Lenhard"
.IX Header "AUTHOR - Boris Lenhard"
Boris Lenhard <Boris.Lenhard@cgb.ki.se>
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are preceded with an underscore.
.SS "new"
.IX Subsection "new"
.Vb 3
\& Title   : new
\& Usage   : DEPRECATED \- for backward compatibility only
\&           Use connect() or create() instead
.Ve
.SS "connect"
.IX Subsection "connect"
.Vb 10
\& Title   : connect
\& Usage   : my $db =
\&            TFBS::DB::JASPAR2\->connect("dbi:mysql:DATABASENAME:HOSTNAME",
\&                                        "USERNAME",
\&                                        "PASSWORD");
\& Function: connects to the existing JASPAR2\-type database and
\&           returns a database object that interfaces the database
\& Returns : a TFBS::DB::JASPAR2 object
\& Args    : a standard database connection triplet
\&           ("dbi:mysql:DATABASENAME:HOSTNAME",  "USERNAME", "PASSWORD")
\&           In place of DATABASENAME, HOSTNAME, USERNAME and PASSWORD,
\&           use the actual values. PASSWORD and USERNAME might be
\&           optional, depending on the user acces permissions for
\&           the database server.
.Ve
.SS "create"
.IX Subsection "create"
.Vb 10
\& Title   : create
\& Usage   : my $newdb =
\&            TFBS::DB::JASPAR2\->create("dbi:mysql:NEWDATABASENAME:HOSTNAME",
\&                                      "USERNAME",
\&                                      "PASSWORD");
\& Function: connects to the database server, creates a new JASPAR2\-type database and returns a database
\&           object that interfaces the database
\& Returns : a TFBS::DB::JASPAR2 object
\& Args    : a standard database connection triplet
\&            ("dbi:mysql:NEWDATABASENAME:HOSTNAME",  "USERNAME", "PASSWORD")
\&           In place of NEWDATABASENAME, HOSTNAME, USERNAME and
\&           PASSWORD use the actual values. PASSWORD and USERNAME
\&           might be optional, depending on the users acces permissions
\&           for the database server.
.Ve
.SS "dbh"
.IX Subsection "dbh"
.Vb 10
\& Title   : dbh
\& Usage   : my $dbh = $db\->dbh();
\&           $dbh\->do("UPDATE matrix_data SET name=\*(AqADD1\*(Aq WHERE NAME=\*(AqSREBP2\*(Aq");
\& Function: returns the DBI database handle of the MySQL database
\&           interfaced by $db; THIS IS USED FOR WRITING NEW METHODS
\&           FOR DIRECT RELATIONAL DATABASE MANIPULATION \- if you
\&           have write access AND do not know what you are doing,
\&           you can severely  corrupt the data
\&           For documentation about database handle methods, see L<DBI>
\& Returns : the database (DBI) handle of the MySQL JASPAR2\-type
\&           relational database associated with the TFBS::DB::JASPAR2
\&           object
\& Args    : none
.Ve
.SS "get_Matrix_by_ID"
.IX Subsection "get_Matrix_by_ID"
.Vb 10
\& Title   : get_Matrix_by_ID
\& Usage   : my $pfm = $db\->get_Matrix_by_ID(\*(AqM00034\*(Aq, \*(AqPFM\*(Aq);
\& Function: fetches matrix data under the given ID from the
\&           database and returns a TFBS::Matrix::* object
\& Returns : a TFBS::Matrix::* object; the exact type of the
\&           object depending on the second argument (allowed
\&           values are \*(AqPFM\*(Aq, \*(AqICM\*(Aq, and \*(AqPWM\*(Aq); returns undef if
\&           matrix with the given ID is not found
\& Args    : (Matrix_ID, Matrix_type)
\&           Matrix_ID is a string; Matrix_type is one of the
\&           following: \*(AqPFM\*(Aq (raw position frequency matrix),
\&           \*(AqICM\*(Aq (information content matrix) or \*(AqPWM\*(Aq (position
\&           weight matrix)
\&           If Matrix_type is omitted, a PWM is retrieved by default.
.Ve
.SS "get_Matrix_by_name"
.IX Subsection "get_Matrix_by_name"
.Vb 10
\& Title   : get_Matrix_by_name
\& Usage   : my $pfm = $db\->get_Matrix_by_name(\*(AqHNF\-1\*(Aq, \*(AqPWM\*(Aq);
\& Function: fetches matrix data under the given name from the
\&           database and returns a TFBS::Matrix::* object
\& Returns : a TFBS::Matrix::* object; the exact type of the object
\&           depending on the second argument (allowed values are
\&           \*(AqPFM\*(Aq, \*(AqICM\*(Aq, and \*(AqPWM\*(Aq)
\& Args    : (Matrix_name, Matrix_type)
\&           Matrix_name is a string; Matrix_type is one of the
\&           following:
\&           \*(AqPFM\*(Aq (raw position frequency matrix),
\&           \*(AqICM\*(Aq (information content matrix) or
\&           \*(AqPWM\*(Aq (position weight matrix)
\&           If Matrix_type is omitted, a PWM is retrieved by default.
\& Warning : According to the current JASPAR2 data model, name is
\&           not necessarily a unique identifier. In the case where
\&           there are several matrices with the same name in the
\&           database, the function fetches the first one and prints
\&           a warning on STDERR. You have been warned.
.Ve
.SS "get_MatrixSet"
.IX Subsection "get_MatrixSet"
.Vb 10
\& Title   : get_MatrixSet
\& Usage   : my $matrixset = $db\->get_MatrixSet(%args);
\& Function: fetches matrix data under for all matrices in the database
\&           matching criteria defined by the named arguments
\&           and returns a TFBS::MatrixSet object
\& Returns : a TFBS::MatrixSet object
\& Args    : This method accepts named arguments:
\&           \-IDs        # a reference to an array of IDs (strings)
\&           \-names      # a reference to an array of
\&                       #  transcription factor names (string)
\&           \-classes    # a reference to an array of
\&                       #  structural class names (strings)
\&           \-species    # a reference to an array of
\&                       #   Latin species names (strings)
\&           \-sysgroups  # a reference to an array of
\&                       #  higher taxonomic categories (strings)
\&
\&           \-matrixtype # a string, \*(AqPFM\*(Aq, \*(AqICM\*(Aq or \*(AqPWM\*(Aq
\&           \-min_ic     # float, minimum total information content
\&                       #   of the matrix
.Ve
.PP
The five arguments that expect list references are used in database
query formulation: elements within lists are combined with '\s-1OR\s0'
operators, and the lists of different types with '\s-1AND\s0'. For example,
.PP
.Vb 3
\&    my $matrixset = $db\->(\-classes => [\*(AqTRP_CLUSTER\*(Aq, \*(AqFORKHEAD\*(Aq],
\&                          \-species => [\*(AqHomo sapiens\*(Aq, \*(AqMus musculus\*(Aq],
\&                          \-matrixtype => \*(AqPWM\*(Aq);
.Ve
.PP
gives a set of PWMs whose (structural clas is '\s-1TRP_CLUSTER\s0' \s-1OR\s0
\&'\s-1FORKHEAD\s0') \s-1AND\s0 (the species they are derived from is 'Homo sapiens'
\&\s-1OR\s0 'Mus musculus').
.PP
The \-min_ic filter is applied after the query in the sense that the
matrices profiles with total information content less than specified
are not included in the set.
.SS "store_Matrix"
.IX Subsection "store_Matrix"
.Vb 9
\& Title   : store_Matrix
\& Usage   : $db\->store_Matrix($pfm);
\& Function: Stores the contents of a TFBS::Matrix::DB object in the database
\& Returns : 0 on success; $@ contents on failure
\&           (this is too C\-like and may change in future versions)
\& Args    : (PFM_object)
\&           A TFBS::Matrix::PFM object
\& Comment : this is an experimental method that is not 100% bulletproof;
\&           use at your own risk
.Ve
.SS "store_MatrixSet"
.IX Subsection "store_MatrixSet"
.Vb 9
\& Title   : store_MatrixSet
\& Usage   : $db\->store_Matrix($matrixset);
\& Function: Stores the TFBS::DB::PFM object that are part of a
\&           TFBS::MatrixSet object into the database
\& Returns : 0 on success; $@ contents on failure
\&           (this is too C\-like and may change in future versions)
\& Args    : (MatrixSet_object)
\&           A TFBS::MatrixSet object
\& Comment : THIS METHOD IS NOT YET IMPLEMENTED
.Ve
.SS "delete_Matrix_having_ID"
.IX Subsection "delete_Matrix_having_ID"
.Vb 9
\& Title   : delete_Matrix_having_ID
\& Usage   : $db\->delete_Matrix_with_ID(\*(AqM00045\*(Aq);
\& Function: Deletes the matrix having the given ID from the database
\& Returns : 0 on success; $@ contents on failure
\&           (this is too C\-like and may change in future versions)
\& Args    : (ID)
\&           A string
\& Comment : Yeah, yeah, \*(Aqdelete_Matrix_having_ID\*(Aq is a stupid name
\&           for a method, but at least it should be obviuos what it does.
.Ve
