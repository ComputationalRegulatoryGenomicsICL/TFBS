.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TFBS::SiteSet 3"
.TH TFBS::SiteSet 3 "2005-01-04" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
TFBS::SiteSet \- a set of TFBS::Site objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    my $site_set = TFBS::SiteSet\->new(@list_of_site_objects);
\&
\&    # add a TFBS::Site object to set:
\&    
\&    $site_set\->add_site($site_obj);
\&
\&    # append another TFBS::SiteSet contents: 
\&
\&    $site_pair_set\->add_site_set($site_obj);
\&
\&    # create an iterator:
\&
\&    my $it = $site_set\->Iterator(\-sort_by => \*(Aqstart\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
TFBS::SiteSet is an aggregate class that contains a collection
of TFBS::Site objects. It can be created anew and filled with 
TFBS::Site object. It is also returned by \fIsearch_seq()\fR method call 
of some TFBS::PatternI subclasses (e.g. TFBS::Matrix::PWM).
.SH "FEEDBACK"
.IX Header "FEEDBACK"
Please send bug reports and other comments to the author.
.SH "AUTHOR \- Boris Lenhard"
.IX Header "AUTHOR - Boris Lenhard"
Boris Lenhard <Boris.Lenhard@cgb.ki.se>
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are preceded with an underscore.
.SS "add_site"
.IX Subsection "add_site"
.Vb 6
\& Title   : add_site
\& Usage   : $siteset\->add_site($site_object)
\&           $siteset\->add_site(@list_of_site_objects)
\& Function: adds TFBS::Site objects to an existing TFBS::SiteSet object
\& Returns : $sitepair object (usually ignored)
\& Args    : A list of TFBS::Site objects to add
.Ve
.SS "add_site_set"
.IX Subsection "add_site_set"
.Vb 8
\& Title   : add_site_set
\& Usage   : $siteset\->add_site_set($site_set_object)
\&           $siteset\->add_site(@list_of_site_set_objects)
\& Function: adds the contents of other TFBS::SiteSet objects 
\&           to an existing TFBS::SiteSet object
\& Returns : $siteset object (usually ignored)
\& Args    : A list of TFBS::SiteSet objects whose contents should be 
\&           added to $siteset
.Ve
.SS "size"
.IX Subsection "size"
.Vb 5
\& Title   : size
\& Usage   : my $size = $siteset\->size()
\& Function: returns a number of TFBS::Site objects contained in the set
\& Returns : a scalar (integer) 
\& Args    : none
.Ve
.SS "Iterator"
.IX Subsection "Iterator"
.Vb 10
\& Title   : Iterator
\& Usage   : my $siteset_iterator = 
\&                   $siteset\->Iterator(\-sort_by =>\*(Aqstart\*(Aq);
\&           while (my $site = $siteset_iterator\->next) {
\&               # do whatever you want with individual matrix objects
\&           }
\& Function: Returns an iterator object that can be used to go through
\&           all members of the set (TFBS::Site objects)
\& Returns : an iterator object (currently undocumentened in TFBS \-
\&                               but understands the \*(Aqnext\*(Aq method)
\& Args    : \-sort_by # optional \- currently it accepts 
\&                    #   (default sort order in parenthetse)
\&                    #    \*(Aqname\*(Aq (pattern name, alphabetically)
\&                    #    \*(AqID\*(Aq (pattern/matrix ID, alphabetically)
\&                    #    \*(Aqstart\*(Aq (site start in sequence, 
\&                    #             numerically,increasing order)
\&                    #    \*(Aqend\*(Aq (site end in sequence, 
\&                    #           numerically, increasing order)
\&                    #    \*(Aqscore\*(Aq (numerically, decreasing order)
\&                    
\&           \-reverse # optional \- reverses the default sorting order if true
.Ve
.SS "\s-1GFF\s0"
.IX Subsection "GFF"
.Vb 6
\& Title   : GFF
\& Usage   : print $siteset\->GFF();
\&         : print $siteset\->GFF($gff_formatter)
\& Function: returns a "standard" multiline GFF string 
\& Returns : a string (multiline, newline terminated)
\& Args    : a $gff_formatter function reference (optional)
.Ve
