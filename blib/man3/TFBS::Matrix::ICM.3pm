.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TFBS::Matrix::ICM 3"
.TH TFBS::Matrix::ICM 3 "2005-01-04" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
TFBS::Matrix::ICM \- class for information content matrices of nucleotide
patterns
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.IP "\(bu" 4
creating a TFBS::Matrix::ICM object manually:
.Sp
.Vb 9
\&    my $matrixref = [ [ 0.00, 0.30, 0.00, 0.00, 0.24, 0.00 ],
\&                      [ 0.00, 0.00, 0.00, 1.45, 0.42, 0.00 ],
\&                      [ 0.00, 0.89, 2.00, 0.00, 0.00, 0.00 ],
\&                      [ 0.00, 0.00, 0.00, 0.13, 0.06, 2.00 ]
\&                    ];  
\&    my $icm = TFBS::Matrix::ICM\->new(\-matrix => $matrixref,
\&                                     \-name   => "MyProfile",
\&                                     \-ID     => "M0001"
\&                                    );
\& 
\&    # or
\& 
\&    my $matrixstring = <<ENDMATRIX
\&    2.00   0.30   0.00   0.00   0.24   0.00
\&    0.00   0.00   0.00   1.45   0.42   0.00
\&    0.00   0.89   2.00   0.00   0.00   0.00
\&    0.00   0.00   0.00   0.13   0.06   2.00
\&    ENDMATRIX
\&    ;
\&    my $icm = TFBS::Matrix::ICM\->new(\-matrixstring => $matrixstring,
\&                                     \-name         => "MyProfile",
\&                                     \-ID           => "M0001"
\&                                    );
.Ve
.IP "\(bu" 4
retrieving a TFBS::Matix::ICM object from a database:
.Sp
(See documentation of individual TFBS::DB::* modules to learn
how to connect to different types of pattern databases and retrieve
TFBS::Matrix::* objects from them.)
.Sp
.Vb 6
\&    my $db_obj = TFBS::DB::JASPAR2\->new
\&                    (\-connect => ["dbi:mysql:JASPAR2:myhost",
\&                                  "myusername", "mypassword"]);
\&    my $pfm = $db_obj\->get_Matrix_by_ID("M0001", "ICM");
\&    # or
\&    my $pfm = $db_obj\->get_Matrix_by_name("MyProfile", "ICM");
.Ve
.IP "\(bu" 4
retrieving list of individual TFBS::Matrix::ICM objects
from a TFBS::MatrixSet object
.Sp
(see decumentation of TFBS::MatrixSet to learn how to create 
objects for storage and manipulation of multiple matrices)
.Sp
.Vb 1
\&    my @icm_list = $matrixset\->all_patterns(\-sort_by=>"name");
.Ve
.Sp
* drawing a sequence logo
.Sp
.Vb 7
\&    $icm\->draw_logo(\-file=>"logo.png", 
\&                    \-full_scale =>2.25,
\&                    \-xsize=>500,
\&                    \-ysize =>250, 
\&                    \-graph_title=>"C/EBPalpha binding site logo", 
\&                    \-x_title=>"position", 
\&                    \-y_title=>"bits");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
TFBS::Matrix::ICM is a class whose instances are objects representing
position weight matrices (PFMs). An \s-1ICM\s0 is normally calculated from a
raw position frequency matrix (see TFBS::Matrix::PFM
for the explanation of position frequency matrices). For example, given
the following position frequency matrix,
.PP
.Vb 4
\&    A:[ 12     3     0     0     4     0  ]
\&    C:[  0     0     0    11     7     0  ]
\&    G:[  0     9    12     0     0     0  ]
\&    T:[  0     0     0     1     1    12  ]
.Ve
.PP
the standard computational procedure is applied to convert it into the
following information content matrix:
.PP
.Vb 4
\&    A:[2.00  0.30  0.00  0.00  0.24  0.00]
\&    C:[0.00  0.00  0.00  1.45  0.42  0.00]
\&    G:[0.00  0.89  2.00  0.00  0.00  0.00]
\&    T:[0.00  0.00  0.00  0.13  0.06  2.00]
.Ve
.PP
which contains the \*(L"weights\*(R" associated with the occurrence of each
nucleotide at the given position in a pattern.
.PP
A TFBS::Matrix::PWM object is equipped with methods to search nucleotide
sequences and pairwise alignments of nucleotide sequences with the
pattern they represent, and return a set of sites in nucleotide
sequence (a TFBS::SiteSet object for single sequence search, and a
TFBS::SitePairSet for the alignment search).
.SH "FEEDBACK"
.IX Header "FEEDBACK"
Please send bug reports and other comments to the author.
.SH "AUTHOR \- Boris Lenhard"
.IX Header "AUTHOR - Boris Lenhard"
Boris Lenhard <Boris.Lenhard@cgb.ki.se>
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are preceded with an underscore.
.SS "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $icm = TFBS::Matrix::ICM\->new(%args)
\& Function: constructor for the TFBS::Matrix::ICM object
\& Returns : a new TFBS::Matrix::ICM object
\& Args    : # you must specify either one of the following three:
\& 
\&           \-matrix,      # reference to an array of arrays of integers
\&              #or
\&           \-matrixstring,# a string containing four lines
\&                         # of tab\- or space\-delimited integers
\&              #or
\&           \-matrixfile,  # the name of a file containing four lines
\&                         # of tab\- or space\-delimited integers
\&           #######
\& 
\&           \-name,        # string, OPTIONAL
\&           \-ID,          # string, OPTIONAL
\&           \-class,       # string, OPTIONAL
\&           \-tags         # an array reference, OPTIONAL
.Ve
.SS "to_PWM"
.IX Subsection "to_PWM"
.Vb 9
\& Title   : to_PWM
\& Usage   : my $pwm = $icm\->to_PWM()
\& Function: converts an  information content matrix (a TFBS::Matrix::ICM object)
\&           to position weight matrix. At present it assumes uniform
\&           background distribution of nucleotide frequencies.
\& Returns : a new TFBS::Matrix::PWM object
\& Args    : none; in the future releases, it should be able to accept
\&           a user defined background probability of the four
\&           nucleotides
.Ve
.SS "draw_logo"
.IX Subsection "draw_logo"
.Vb 10
\& Title   : draw_logo
\& Usage   : my $gdImageObj = $icm\->draw_logo(%args)
\& Function: Draws a "sequence logo", a graphical representation
\&           of a possibly degenerate fixed\-width nucleotide
\&           sequence pattern, from the information content matrix
\& Returns : a GD::Image object;
\&           if you only need the image file you can ignore it
\& Args    : \-file,       # the name of the output PNG image file
\&                        # OPTIONAL: default none
\&           \-xsize       # width of the image in pixels
\&                        # OPTIONAL: default 600
\&           \-ysize       # height of the image in pixels
\&                        # OPTIONAL: default 5/8 of \-x_size
\&           \-margin      # size of image margins in pixels
\&                        # OPTIONAL: default 15% of \-y_size
\&           \-full_scale  # the maximum value on the y\-axis, in bits
\&                        # OPTIONAL: default 2.25
\&           \-graph_title,# the graph title
\&                        # OPTIONAL: default none
\&           \-x_title,    # x\-axis title; OPTIONAL: default none
\&           \-y_title     # y\-axis title; OPTIONAL: default none
\&           \-error_bars  # reference to an array of S.D. values for each column; OPTIONAL
\&           \-ps          # if true, produces a postscript string instead of a GD::Image object
\&            \-pdf          # if true AND the \-file argumant is used, produces an output pdf file
.Ve
.SS "_draw_ps_logo"
.IX Subsection "_draw_ps_logo"
.Vb 10
\& Title   : _draw_ps_logo 
\& Usage   : my $postscript_string = $icm\->_draw_ps_logo(%args)
\&           Internal method, should be accessed using draw_logo()
\& Function: Draws a "sequence logo", a graphical representation
\&           of a possibly degenerate fixed\-width nucleotide
\&           sequence pattern, from the information content matrix
\& Returns : a postscript string;
\&           if you only need the image file you can ignore it
\& Args    : \-file,       # the name of the output PNG image file
\&                        # OPTIONAL: default none
\&           \-xsize       # width of the image in pixels
\&                        # OPTIONAL: default 600
\&           \-ysize       # height of the image in pixels
\&                        # OPTIONAL: default 5/8 of \-x_size
\&           \-full_scale  # the maximum value on the y\-axis, in bits
\&                        # OPTIONAL: default 2.25
\&           \-graph_title,# the graph title
\&                        # OPTIONAL: default none
\&           \-x_title,    # x\-axis title; OPTIONAL: default none
\&           \-y_title     # y\-axis title; OPTIONAL: default none
.Ve
.SS "name"
.IX Subsection "name"
.SS "\s-1ID\s0"
.IX Subsection "ID"
.SS "class"
.IX Subsection "class"
.SS "matrix"
.IX Subsection "matrix"
.SS "length"
.IX Subsection "length"
.SS "revcom"
.IX Subsection "revcom"
.SS "rawprint"
.IX Subsection "rawprint"
.SS "prettyprint"
.IX Subsection "prettyprint"
The above methods are common to all matrix objects. Please consult
TFBS::Matrix to find out how to use them.
