.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TFBS::PatternGen::Gibbs 3"
.TH TFBS::PatternGen::Gibbs 3 "2005-01-04" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
TFBS::PatternGen::Gibbs \- a pattern factory that uses Chip Lawrences Gibbs program
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&    my $patterngen =
\&            TFBS::PatternGen::Gibbs\->new(\-seq_file=>\*(Aqsequences.fa\*(Aq,
\&                                         \-binary => \*(Aq/Programs/Gibbs\-1.0/bin/Gibbs\*(Aq
\&                                         \-nr_hits => 24,
\&                                         \-motif_length => [8, 9, 10],
\&                                         \-additional_params => \*(Aq\-x \-r \-e\*(Aq);
\&
\&    my $pfm = $patterngen\->pattern(); # $pfm is now a TFBS::Matrix::PFM object
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
TFBS::PatternGen::Gibbs builds position frequency matrices
using an advanced Gibbs sampling algorithm implemented in external
\&\fIGibbs\fR program by Chip Lawrence. The algorithm can produce
multiple patterns from a single set of sequences.
.SS "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : my $db = TFBS::PatternGen::Gibbs\->new(%args);
\& Function: the constructor for the TFBS::PatternGen::Gibbs object
\& Returns : a TFBS::PatternGen::Gibbs object
\& Args    : This method takes named arguments;
\&            you must specify one of the following three
\&            \-seq_list     # a reference to an array of strings
\&                          #   and/or Bio::Seq objects
\&              # or
\&            \-seq_stream   # A Bio::SeqIO object
\&              # or
\&            \-seq_file     # the name of the fasta file containing
\&                          #   all the sequences
\&           Other arguments are:
\&            \-binary       # a fully qualified path to Gibbs executable
\&                          #  OPTIONAL: default \*(AqGibbs\*(Aq
\&            \-nr_hits      # a presumed number of pattern occurrences in the
\&                          #   sequence set: it can be a single integer, e.g.
\&                          #   \-nr_hits => 24 , or a reference to an array of
\&                          #   integers, e.g \-nr_hits => [12, 24, 36]
\&            \-motif_length # an expected length of motif in nucleotides:
\&                          #   it can be a single integer, e.g.
\&                          #   \-motif_length => 8 , or a reference to an
\&                          #   array ofintegers, e.g \-motif_length => [8..12]
\&            \-additional_params  # a string containing additional
\&                                #   command\-line switches for the
\&                                #   Gibbs program
.Ve
.SS "pattern"
.IX Subsection "pattern"
.SS "all_patterns"
.IX Subsection "all_patterns"
.SS "patternSet"
.IX Subsection "patternSet"
The three methods listed above are used for the retrieval of patterns,
and are common to all TFBS::PatternGen::* classes. Please
see TFBS::PatternGen for details.
