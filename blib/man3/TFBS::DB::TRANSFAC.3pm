.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TFBS::DB::TRANSFAC 3"
.TH TFBS::DB::TRANSFAC 3 "2005-01-04" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
TFBS::DB::TRANSFAC \- interface to database of TRANSFAC public
position frequency matrices at TESS (http://www.cbil.upenn.edu/tess)
.PP
.Vb 5
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- NOTICE \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  The TRANSFAC database is free for non\-commercial use.  For commercial use
\&  the TRANSFAC databases and programs have to be licensed. Please read 
\&  the DISCLAIMER at http://transfac.gbf.de/TRANSFAC/disclaimer.htm.
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.IP "\(bu" 4
creating a database object by connecting to \s-1TRANSFAC\s0 data
.Sp
.Vb 1
\&    my $db = TFBS::DB::TRANSFAC\->connect();
.Ve
.IP "\(bu" 4
retrieving a TFBS::Matrix::* object from the database
.Sp
.Vb 2
\&    # retrieving a PFM by ID
\&    my $pfm = $db\->get_Matrix_by_ID(\*(AqV$CEBPA_01\*(Aq,\*(AqPFM\*(Aq);
\& 
\&    #retrieving a PWM by TRANSFAC accession number
\&    my $pwm = $db\->get_Matrix_by_acc(\*(AqM00116\*(Aq, \*(AqPWM\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1TFBS::DB::TRANSFAC\s0 is a read only database interface that fetches
\&\s-1TRANSFAC\s0 matrix data from \s-1TESS\s0 web interface
(http://www.cbil.upen.edu/TESS) and returns TFBS::Matrix::* objects.
.SS "connect"
.IX Subsection "connect"
.Vb 10
\& Title   : connect
\& Usage   : my $db = TFBS::DB::TRANSFAC\->connect(%args);
\& Function: Creates a TRANSFAC database connection object, which can be used
\&           to retrieve matrices from public TRANSFAC databases via the web
\& Returns : a TFBS::DB::TRANSFAC object
\& Args    : \-proxy # OPTIONAL: a http proxy server name, 
\&                  # usually required for accessing TRANSFAC from behind 
\&                  # a firewall
\&           \-accept_conditions # OPTIONAL: by setting this to a true 
\&                              # value, you confirm that you
\&                              # have read and accepted the terms 
\&                              # of use of TRANSFAC at
\&                              # http://transfac.gbf.de/TRANSFAC/disclaimer.htm;
\&                              # this also suppresses the annoying
\&                              # message that is printed to STDERR
\&                              # upon invoking the method
.Ve
.SS "new"
.IX Subsection "new"
.Vb 7
\& Title   : connect
\& Usage   : my $db = TFBS::DB::TRANSFAC\->connect(%args);
\& Function: Here, I<new> is just a synonim for I<connect>
\&           (to make the interface consistent with other
\&            bioperl read\-obly Bio::DB::* objects)
\& Returns : a TFBS::DB::TRANSFAC object
\& Args    : \-accept_conditions # see explanation at I<new>
.Ve
.SS "get_Matrix_by_ID"
.IX Subsection "get_Matrix_by_ID"
.Vb 10
\& Title   : get_Matrix_by_ID
\& Usage   : my $pfm = $db\->get_Matrix_by_ID(\*(AqV$CREB_01\*(Aq, \*(AqPFM\*(Aq);
\& Function: fetches matrix data under the given TRANSFAC ID from the
\&           database and returns a TFBS::Matrix::* object
\& Returns : a TFBS::Matrix::* object; the exact type of the
\&           object depending on the second argument (allowed
\&           values are \*(AqPFM\*(Aq, \*(AqICM\*(Aq, and \*(AqPWM\*(Aq); returns undef if
\&           matrix with the given ID is not found
\& Args    : (Matrix_ID, Matrix_type)
\&           Matrix_ID is a string; Matrix_type is one of the
\&           following: \*(AqPFM\*(Aq (raw position frequency matrix),
\&           \*(AqICM\*(Aq (information content matrix) or \*(AqPWM\*(Aq (position
\&           weight matrix)
\&           If Matrix_type is omitted, a PFM is retrieved by default.
.Ve
.SS "get_Matrix_by_acc"
.IX Subsection "get_Matrix_by_acc"
.Vb 10
\& Title   : get_Matrix_by_acc
\& Usage   : my $pfm = $db\->get_Matrix_by_acc(\*(AqV$CREB_01\*(Aq, \*(AqPFM\*(Aq);
\& Function: fetches matrix data under the given TRANSFAC aaccession number
\&           from database and returns a TFBS::Matrix::* object
\& Returns : a TFBS::Matrix::* object; the exact type of the
\&           object depending on the second argument (allowed
\&           values are \*(AqPFM\*(Aq, \*(AqICM\*(Aq, and \*(AqPWM\*(Aq); returns undef if
\&           matrix with the given ID is not found
\& Args    : (Matrix_ID, Matrix_type)
\&           Matrix_ID is a string; Matrix_type is one of the
\&           following: \*(AqPFM\*(Aq (raw position frequency matrix),
\&           \*(AqICM\*(Aq (information content matrix) or \*(AqPWM\*(Aq (position
\&           weight matrix)
\&           If Matrix_type is omitted, a PFM is retrieved by default.
.Ve
