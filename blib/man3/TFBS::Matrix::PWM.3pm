.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TFBS::Matrix::PWM 3"
.TH TFBS::Matrix::PWM 3 "2005-01-04" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
TFBS::Matrix::PWM \- class for position weight matrices of nucleotide
patterns
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.IP "\(bu" 4
creating a TFBS::Matrix::PWM object manually:
.Sp
.Vb 10
\&    my $matrixref = [ [ 0.61, \-3.16,  1.83, \-3.16,  1.21, \-0.06],
\&                      [\-0.15, \-2.57, \-3.16, \-3.16, \-2.57, \-1.83],
\&                      [\-1.57,  1.85, \-2.57, \-1.34, \-1.57,  1.14],
\&                      [ 0.31, \-3.16, \-2.57,  1.76,  0.24, \-0.83]
\&                    ];
\&    my $pwm = TFBS::Matrix::PWM\->new(\-matrix => $matrixref,
\&                                     \-name   => "MyProfile",
\&                                     \-ID     => "M0001"
\&                                    );
\&    # or
\&
\&    my $matrixstring = <<ENDMATRIX
\&     0.61 \-3.16  1.83 \-3.16  1.21 \-0.06
\&    \-0.15 \-2.57 \-3.16 \-3.16 \-2.57 \-1.83
\&    \-1.57  1.85 \-2.57 \-1.34 \-1.57  1.14
\&     0.31 \-3.16 \-2.57  1.76  0.24 \-0.83
\&    ENDMATRIX
\&    ;
\&    my $pwm = TFBS::Matrix::PWM\->new(\-matrixstring => $matrixstring,
\&                                     \-name         => "MyProfile",
\&                                     \-ID           => "M0001"
\&                                    );
.Ve
.IP "\(bu" 4
retrieving a TFBS::Matix::PWM object from a database:
.Sp
(See documentation of individual TFBS::DB::* modules to learn
how to connect to different types of pattern databases and retrieve
TFBS::Matrix::* objects from them.)
.Sp
.Vb 6
\&    my $db_obj = TFBS::DB::JASPAR2\->new
\&                    (\-connect => ["dbi:mysql:JASPAR2:myhost",
\&                                  "myusername", "mypassword"]);
\&    my $pwm = $db_obj\->get_Matrix_by_ID("M0001", "PWM");
\&    # or
\&    my $pwm = $db_obj\->get_Matrix_by_name("MyProfile", "PWM");
.Ve
.IP "\(bu" 4
retrieving list of individual TFBS::Matrix::PWM objects
from a TFBS::MatrixSet object
.Sp
(see decumentation of TFBS::MatrixSet to learn how to create
objects for storage and manipulation of multiple matrices)
.Sp
.Vb 1
\&    my @pwm_list = $matrixset\->all_patterns(\-sort_by=>"name");
.Ve
.IP "\(bu" 4
scanning a nucleotide sequence with a matrix
.Sp
.Vb 2
\&    my $siteset = $pwm\->search_seq(\-file      =>"myseq.fa",
\&                                   \-threshold => "80%");
.Ve
.IP "\(bu" 4
scanning a pairwise alignment with a matrix
.Sp
.Vb 4
\&    my $site_pair_set = $pwm\->search_aln(\-file      =>"myalign.aln",
\&                                         \-threshold => "80%",
\&                                         \-cutoff    => "70%",
\&                                         \-window    => 50);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
TFBS::Matrix::PWM is a class whose instances are objects representing
position weight matrices (PWMs). A \s-1PWM\s0 is normally calculated from a
raw position frequency matrix (see TFBS::Matrix::PFM
for the explanation of position frequency matrices). For example, given
the following position frequency matrix:
.PP
.Vb 4
\&    A:[ 12     3     0     0     4     0  ]
\&    C:[  0     0     0    11     7     0  ]
\&    G:[  0     9    12     0     0     0  ]
\&    T:[  0     0     0     1     1    12  ]
.Ve
.PP
The standard computational procedure is applied to convert it into the
following position weight matrix:
.PP
.Vb 4
\&    A:[ 0.61 \-3.16  1.83 \-3.16  1.21 \-0.06]
\&    C:[\-0.15 \-2.57 \-3.16 \-3.16 \-2.57 \-1.83]
\&    G:[\-1.57  1.85 \-2.57 \-1.34 \-1.57  1.14]
\&    T:[ 0.31 \-3.16 \-2.57  1.76  0.24 \-0.83]
.Ve
.PP
which contains the \*(L"weights\*(R" associated with the occurence of each
nucleotide at the given position in a pattern.
.PP
A TFBS::Matrix::PWM object is equipped with methods to search nucleotide
sequences and pairwise alignments of nucleotide sequences with the
pattern they represent, and return a set of sites in nucleotide
sequence (a TFBS::SiteSet object for single sequence search, and a
TFBS::SitePairSet for the alignment search).
.SH "FEEDBACK"
.IX Header "FEEDBACK"
Please send bug reports and other comments to the author.
.SH "AUTHOR \- Boris Lenhard"
.IX Header "AUTHOR - Boris Lenhard"
Boris Lenhard <Boris.Lenhard@cgb.ki.se>
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are preceded with an underscore.
.SS "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $pwm = TFBS::Matrix::PWM\->new(%args)
\& Function: constructor for the TFBS::Matrix::PWM object
\& Returns : a new TFBS::Matrix::PWM object
\& Args    : # you must specify either one of the following three:
\&
\&           \-matrix,      # reference to an array of arrays of integers
\&              #or
\&           \-matrixstring,# a string containing four lines
\&                         # of tab\- or space\-delimited integers
\&              #or
\&           \-matrixfile,  # the name of a file containing four lines
\&                         # of tab\- or space\-delimited integers
\&           #######
\&
\&           \-name,        # string, OPTIONAL
\&           \-ID,          # string, OPTIONAL
\&           \-class,       # string, OPTIONAL
\&           \-tags         # an array reference, OPTIONAL
.Ve
.SS "search_seq"
.IX Subsection "search_seq"
.Vb 6
\& Title   : search_seq
\& Usage   : my $siteset = $pwm\->search_seq(%args)
\& Function: scans a nucleotide sequence with the pattern represented
\&           by the PWM
\& Returns : a TFBS::SiteSet object
\& Args    : # you must specify either one of the following three:
\&
\&           \-file,       # the name od a fasta file (single sequence)
\&              #or
\&           \-seqobj      # a Bio::Seq object
\&                        # (more accurately, a Bio::PrimarySeqobject or a
\&                        #  subclass thereof)
\&              #or
\&           \-seqstring # a string containing the sequence
\&
\&           \-threshold,  # minimum score for the hit, either absolute
\&                        # (e.g. 11.2) or relative (e.g. "75%")
\&                        # OPTIONAL: default "80%"
\&
\&           \-subpart     # subpart of the sequence to search, given as
\&                        # \-subpart => { start => 140,
\&                        #               end   => 180 }
\&                        # where start and end are coordinates in the
\&                        # sequence; the coordinate range is interpreted
\&                        # in the BioPerl tradition (1\-based, inclusive)
\&                        # OPTIONAL: by default searches entire alignment
.Ve
.SS "search_aln"
.IX Subsection "search_aln"
.Vb 10
\& Title   : search_aln
\& Usage   : my $site_pair_set = $pwm\->search_aln(%args)
\& Function: Scans a pairwise alignment of nucleotide sequences
\&           with the pattern represented by the PWM: it reports only
\&           those hits that are present in equivalent positions of both
\&           sequences and exceed a specified threshold score in both, AND
\&           are found in regions of the alignment above the specified
\&           conservation cutoff value.
\& Returns : a TFBS::SitePairSet object
\& Args    : # you must specify either one of the following three:
\&
\&           \-file,       # the name of the alignment file in Clustal
\&                               format
\&              #or
\&           \-alignobj      # a Bio::SimpleAlign object
\&                        # (more accurately, a Bio::PrimarySeqobject or a
\&                        #  subclass thereof)
\&              #or
\&           \-alignstring # a multi\-line string containing the alignment
\&                        # in clustal format
\&           #############
\&
\&           \-threshold,  # minimum score for the hit, either absolute
\&                        # (e.g. 11.2) or relative (e.g. "75%")
\&                        # OPTIONAL: default "80%"
\&
\&           \-window,     # size of the sliding window (inn nucleotides)
\&                        # for calculating local conservation in the
\&                        # alignment
\&                        # OPTIONAL: default 50
\&
\&           \-cutoff      # conservation cutoff (%) for including the
\&                        # region in the results of the pattern search
\&                        # OPTIONAL: default "70%"
\&
\&           \-subpart     # subpart of the alignment to search, given as e.g.
\&                        # \-subpart => { relative_to => 1,
\&                        #               start       => 140,
\&                        #               end         => 180 }
\&                        # where start and end are coordinates in the
\&                        # sequence indicated by relative_to (1 for the
\&                        # 1st sequence in the alignment, 2 for the 2nd)
\&                        # OPTIONAL: by default searches entire alignment
\&
\&           \-conservation
\&                        # conservation profile, a TFBS::ConservationProfile
\&                        # OPTIONAL: by default the conservation profile is
\&                        # computed internally on the fly (less efficient)
.Ve
.SS "name"
.IX Subsection "name"
.SS "\s-1ID\s0"
.IX Subsection "ID"
.SS "class"
.IX Subsection "class"
.SS "matrix"
.IX Subsection "matrix"
.SS "length"
.IX Subsection "length"
.SS "revcom"
.IX Subsection "revcom"
.SS "rawprint"
.IX Subsection "rawprint"
.SS "prettyprint"
.IX Subsection "prettyprint"
The above methods are common to all matrix objects. Please consult
TFBS::Matrix to find out how to use them.
